// Generated by CoffeeScript 1.7.1

/*
The Ball class is an Entity.
 */
var Ball,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Ball = (function(_super) {
  __extends(Ball, _super);


  /*
  Construct a ball
   */

  function Ball(radius) {
    this.radius = radius != null ? radius : 4;
    Ball.__super__.constructor.call(this);
    this.height = this.radius * 2;
    this.reset();
  }

  Ball.prototype.reset = function() {
    var maxVector, minVector, randVector;
    this.x = game.width / 2;
    this.y = game.height / 2;
    this.velocity = 4;
    this.vector = 90;
    minVector = -25;
    maxVector = 25;
    randVector = Math.floor(Math.random() * (maxVector - minVector + 1) + minVector);
    return this.vector += randVector;
  };


  /*
  Update the position of the ball, taking into account the entities around
  the ball.
   */

  Ball.prototype.update = function(steps) {
    var block, n, _i, _len, _ref, _results;
    Ball.__super__.update.call(this, steps);
    if (this.y - this.radius >= game.height) {
      this.reset();
    } else if (this.y <= this.radius) {
      this.y = this.radius;
      this.bounce(90);
    } else if (this.x <= this.radius) {
      this.x = this.radius;
      this.bounce(360);
    } else if (this.x >= game.width - this.radius) {
      this.x = game.width - this.radius;
      this.bounce(180);
    }
    if (this.intersect(game.paddle)) {
      this.y = game.paddle.y - this.radius;
      return this.bounce(game.paddle.getNormalAngleAt(this.x - game.paddle.x));
    } else {
      _ref = game.blockMap.blocks;
      _results = [];
      for (n = _i = 0, _len = _ref.length; _i < _len; n = ++_i) {
        block = _ref[n];
        if (!block.removed && this.intersect(block)) {
          block.incrementHitCount();
          if (this.y <= block.y) {
            _results.push(this.bounce(270));
          } else if (this.y >= block.y + block.height) {
            _results.push(this.bounce(90));
          } else if (this.x <= block.x) {
            _results.push(this.bounce(180));
          } else {
            _results.push(this.bounce(360));
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  };


  /*
  Draw the ball on the given drawing surface.
   */

  Ball.prototype.draw = function(context) {
    context.beginPath();
    context.arc(this.x, this.y, this.radius, 0, 2 * Math.PI, false);
    context.fillStyle = game.colours.getColour("ballBackground");
    context.fill();
    context.lineWidth = 1;
    context.strokeStyle = game.colours.getColour("ballStroke");
    return context.stroke();
  };


  /*
  Bounce the ball on the given surface. The surface is specified by it's perpendicular angle.
   */

  Ball.prototype.bounce = function(normal) {
    var m, o;
    o = this.vector - 180 - normal;
    m = normal - o;
    if (m <= 0) {
      m += 360;
    } else if (m > 360) {
      m -= 360;
    }
    return this.vector = m;
  };


  /*
  Does this ball intersect with the given other entity?
   */

  Ball.prototype.intersect = function(other) {
    var closestX, closestY, distance;
    closestX = Entity.constrain(this.x, other.x, other.x + other.width);
    closestY = Entity.constrain(this.y, other.y, other.y + other.height);
    distance = Entity.calcDistance(this.x, this.y, closestX, closestY);
    if (distance < this.radius) {
      return true;
    } else {
      return false;
    }
  };

  return Ball;

})(Entity);
